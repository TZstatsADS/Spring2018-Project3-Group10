t <- 0
#main body
for (times in 1:Re){
x <- gendata(n1, n2)
list1 <- alg4(x, s, B, R)
if (list1$i >= 0){
sigma <- list1$s + list1$i
coverage <- coverage + (abs(0.182 - list1$phi) < (qnorm(1 - alpha / 2) * sqrt(sigma)))
CIlength[times] <- 2 * qnorm(1 - alpha / 2) * sqrt(sigma)
inputvar[times] <- list1$i
simvar <- simvar + list1$s
sumV <- sumV + list1$v
t <- t + 1
}
else{
sigma <- list1$s
coverage2 <- coverage2 + (abs(0.182 - list1$phi) < (qnorm(1 - alpha / 2) * sqrt(sigma)))
CIlength2[times] <- 2 * qnorm(1 - alpha / 2) * sqrt(sigma)
simvar2 <- simvar2 + list1$s
sumV2 <- sumV2 + list1$v
}
}
#out1: remove those sigma_i < 0
sumofsigmaisq1 <- sum(inputvar, na.rm = TRUE)
out1 <- c(t, coverage / t, mean(CIlength, na.rm = TRUE), sd(CIlength, na.rm = TRUE), sqrt(sumofsigmaisq1 / simvar), sumofsigmaisq1 / t, sd(inputvar, na.rm = TRUE), sumofsigmaisq1 / sumV)
#out2: substitue those sigma_i < 0 with 0
totalCIlength <- c(as.numeric(na.omit(CIlength)), as.numeric(na.omit(CIlength2)))
inputvar[is.na(inputvar)] <- 0
out2 <- c((coverage + coverage2) / Re, mean(totalCIlength), sd(totalCIlength), sqrt(sumofsigmaisq1 / (simvar + simvar2)), sumofsigmaisq1 / Re, sd(inputvar), sumofsigmaisq1 / (sumV + sumV2))
out <- c(out1, NA, out2)
return(out)
}
#outcome
s1 = list(m1 = 30, m2 = 30)
ExpOnAlg4_2 <- function(n1, n2, alpha, s, B, R, Rtilde, Re){
#coverage for those sigma_i >=0, coverage2 for those sigma_i < 0.
#Similar for CIlength and CIlength2; sumV and sumV2; simvar and simvar2
coverage <- 0
coverage2 <- 0
CIlength <- numeric()
CIlength2 <- numeric()
sumV <- 0
sumV2 <- 0
inputvar <- numeric()
simvar <- 0
simvar2 <- 0
t <- 0
#main body
for (times in 1:Re){
x <- gendata(n1, n2)
list1 <- alg4_2(x, s, B, R, Rtilde)
if (list1$i >= 0){
sigma <- list1$s + list1$i
coverage <- coverage + (abs(0.182 - list1$phi) < (qnorm(1 - alpha / 2) * sqrt(sigma)))
CIlength[times] <- 2 * qnorm(1 - alpha / 2) * sqrt(sigma)
inputvar[times] <- list1$i
simvar <- simvar + list1$s
sumV <- sumV + list1$v
t <- t + 1
}
else{
sigma <- list1$s
coverage2 <- coverage2 + (abs(0.182 - list1$phi) < (qnorm(1 - alpha / 2) * sqrt(sigma)))
CIlength2[times] <- 2 * qnorm(1 - alpha / 2) * sqrt(sigma)
simvar2 <- simvar2 + list1$s
sumV2 <- sumV2 + list1$v
}
}
#out1: remove those sigma_i < 0
sumofsigmaisq1 <- sum(inputvar, na.rm = TRUE)
out1 <- c(t, coverage / t, mean(CIlength, na.rm = TRUE), sd(CIlength, na.rm = TRUE), sqrt(sumofsigmaisq1 / simvar), sumofsigmaisq1 / t, sd(inputvar, na.rm = TRUE), sumofsigmaisq1 / sumV)
#out2: substitue those sigma_i < 0 with 0
totalCIlength <- c(as.numeric(na.omit(CIlength)), as.numeric(na.omit(CIlength2)))
inputvar[is.na(inputvar)] <- 0
out2 <- c((coverage + coverage2) / Re, mean(totalCIlength), sd(totalCIlength), sqrt(sumofsigmaisq1 / (simvar + simvar2)), sumofsigmaisq1 / Re, sd(inputvar), sumofsigmaisq1 / (sumV + sumV2))
out <- c(out1, NA, out2)
return(out)
}
ExpOnAlg4_3 <- function(n1, n2, alpha, s, B, R, Rtilde, Re){
#coverage for those sigma_i >=0, coverage2 for those sigma_i < 0.
#Similar for CIlength and CIlength2; sumV and sumV2; simvar and simvar2
coverage <- 0
coverage2 <- 0
CIlength <- numeric()
CIlength2 <- numeric()
sumV <- 0
sumV2 <- 0
inputvar <- numeric()
simvar <- 0
simvar2 <- 0
t <- 0
#main body
for (times in 1:Re){
x <- gendata(n1, n2)
list1 <- alg4_3(x, s, B, R, Rtilde)
if (list1$i >= 0){
sigma <- list1$s + list1$i
coverage <- coverage + (abs(0.182 - list1$phi) < (qnorm(1 - alpha / 2) * sqrt(sigma)))
CIlength[times] <- 2 * qnorm(1 - alpha / 2) * sqrt(sigma)
inputvar[times] <- list1$i
simvar <- simvar + list1$s
sumV <- sumV + list1$v
t <- t + 1
}
else{
sigma <- list1$s
coverage2 <- coverage2 + (abs(0.182 - list1$phi) < (qnorm(1 - alpha / 2) * sqrt(sigma)))
CIlength2[times] <- 2 * qnorm(1 - alpha / 2) * sqrt(sigma)
simvar2 <- simvar2 + list1$s
sumV2 <- sumV2 + list1$v
}
}
#out1: remove those sigma_i < 0
sumofsigmaisq1 <- sum(inputvar, na.rm = TRUE)
out1 <- c(t, coverage / t, mean(CIlength, na.rm = TRUE), sd(CIlength, na.rm = TRUE), sqrt(sumofsigmaisq1 / simvar), sumofsigmaisq1 / t, sd(inputvar, na.rm = TRUE), sumofsigmaisq1 / sumV)
#out2: substitue those sigma_i < 0 with 0
totalCIlength <- c(as.numeric(na.omit(CIlength)), as.numeric(na.omit(CIlength2)))
inputvar[is.na(inputvar)] <- 0
out2 <- c((coverage + coverage2) / Re, mean(totalCIlength), sd(totalCIlength), sqrt(sumofsigmaisq1 / (simvar + simvar2)), sumofsigmaisq1 / Re, sd(inputvar), sumofsigmaisq1 / (sumV + sumV2))
out <- c(out1, NA, out2)
return(out)
}
table3 <- matrix(nrow = 5, ncol = 16)
colnames(table3) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V")
table3[1,] <- ExpOnAlg4_2(60, 30, 0.05, s1, 1000, 1, 100, 1000)
table3[2,] <- ExpOnAlg4_2(200, 100, 0.05, s1, 1000, 1, 100, 1000)
table3[3,] <- ExpOnAlg4_2(600, 300, 0.05, s1, 2000, 1, 100, 1000)
write.csv(table3, "table3.csv")
## Budget N varies, to choose the optimal B, R, theta as shown in P12 and P13, Rtilde = 100
table4 <- matrix(nrow = 5, ncol = 19)
colnames(table4) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "theta", "s1", "s2")
table4[1,] <- thetaselection2(60, 30, 0.05, 1000, 1, 100, 1000)
table4[2,] <- thetaselection2(200, 100, 0.05, 1000, 1, 100, 1000)
table4[3,] <- thetaselection2(600, 300, 0.05, 2000, 1, 100, 1000)
write.csv(table4, "table4.csv")
## To reproduce Table1-like on P45 Rtilde = 200
## B = {1000, 1000, 2000, 4000, 6000}, R = 1, s = (30, 30)
table5 <- matrix(nrow = 5, ncol = 16)
colnames(table5) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V")
table5[1,] <- ExpOnAlg4_2(60, 30, 0.05, s1, 1000, 1, 200, 1000)
table5[2,] <- ExpOnAlg4_2(200, 100, 0.05, s1, 1000, 1, 200, 1000)
## Budget N varies, to choose the optimal B, R, theta as shown in P12 and P13, Rtilde = 100
thetaselection2 <- function(n1, n2, alpha, B, R, Rtilde, Re){
n = (n1 + n2) / 2
theta = min(sqrt(B), n ^ (3 / 4)) * n ^ (-5 / 4)
s1 <- ceiling(n1 * theta)
s2 <- ceiling(n2 * theta)
s <- list(m1 = s1, m2 = s2)
out <- c(ExpOnAlg4_2(n1, n2, alpha, s, B, R, Rtilde, Re), theta, s1, s2)
return(out)
}
## Budget N varies, to choose the optimal B, R, theta as shown in P12 and P13, Rtilde = 100
thetaselection3 <- function(n1, n2, alpha, B, R, Rtilde, Re){
n = (n1 + n2) / 2
theta = min(sqrt(B), n ^ (3 / 4)) * n ^ (-5 / 4)
s1 <- ceiling(n1 * theta)
s2 <- ceiling(n2 * theta)
s <- list(m1 = s1, m2 = s2)
out <- c(ExpOnAlg4_3(n1, n2, alpha, s, B, R, Rtilde, Re), theta, s1, s2)
return(out)
}
table4 <- matrix(nrow = 5, ncol = 19)
colnames(table4) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "theta", "s1", "s2")
table4[1,] <- thetaselection2(60, 30, 0.05, 1000, 1, 100, 1000)
table4[2,] <- thetaselection2(200, 100, 0.05, 1000, 1, 100, 1000)
table4[3,] <- thetaselection2(600, 300, 0.05, 2000, 1, 100, 1000)
write.csv(table4, "table4.csv")
## To reproduce Table1-like on P45 Rtilde = 200
## B = {1000, 1000, 2000, 4000, 6000}, R = 1, s = (30, 30)
table5 <- matrix(nrow = 5, ncol = 16)
colnames(table5) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V")
table5[1,] <- ExpOnAlg4_2(60, 30, 0.05, s1, 1000, 1, 200, 1000)
table5[2,] <- ExpOnAlg4_2(200, 100, 0.05, s1, 1000, 1, 200, 1000)
table5[3,] <- ExpOnAlg4_2(600, 300, 0.05, s1, 2000, 1, 200, 1000)
write.csv(table5, "table5.csv")
## Budget N varies, to choose the optimal B, R, theta as shown in P12 and P13, Rtilde = 100
table6 <- matrix(nrow = 5, ncol = 19)
colnames(table6) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "theta", "s1", "s2")
table6[1,] <- thetaselection2(60, 30, 0.05, 1000, 1, 200, 1000)
table6[2,] <- thetaselection2(200, 100, 0.05, 1000, 1, 200, 1000)
table6[3,] <- thetaselection2(600, 300, 0.05, 2000, 1, 200, 1000)
write.csv(table6, "table6.csv")
table7 <- matrix(nrow = 5, ncol = 16)
colnames(table7) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V")
table7[1,] <- ExpOnAlg4_3(60, 30, 0.05, s1, 1000, 1, 100, 1000)
table7[2,] <- ExpOnAlg4_3(200, 100, 0.05, s1, 1000, 1, 100, 1000)
table7[3,] <- ExpOnAlg4_3(600, 300, 0.05, s1, 2000, 1, 100, 1000)
write.csv(table7, "table7.csv")
## Budget N varies, to choose the optimal B, R, theta as shown in P12 and P13, Rtilde = 100
table8 <- matrix(nrow = 5, ncol = 19)
colnames(table8) <- c("t", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "seperate col", "Coverage", "mean CI length", "std. CI Length", "sqrt(sigmaIsq/sigmaSsq)", "mean sigmaIsq", "std sigmaIsq", "sigmaIsq/V", "theta", "s1", "s2")
table8[1,] <- thetaselection3(60, 30, 0.05, 1000, 1, 100, 1000)
table8[2,] <- thetaselection3(200, 100, 0.05, 1000, 1, 100, 1000)
table8[3,] <- thetaselection3(600, 300, 0.05, 2000, 1, 100, 1000)
setwd("~/GitHub/Spring2018-Project3-spring2018-project3-group10/doc")
load("~/GitHub/Spring2018-Project3-spring2018-project3-group10/output/err_cv_HOG_svm.RData")
err_cv
err_cv_svm <- data.frame(err_cv[,1])
err_cv_svm
err_cv_svm <- data.frame(t(err_cv[,1])
err_cv_svm <- data.frame(t(err_cv[,1]))
err_cv_svm
err_cv_svm <- data.frame(HOG = t(err_cv[,1]))
err_cv_svm
hog_cv <- err_cv
hog_cv <- err_cv[,1]
load("~/GitHub/Spring2018-Project3-spring2018-project3-group10/output/err_cv_LBP_svm.RData")
lbp_cv <- err_cv[,1]
load("~/GitHub/Spring2018-Project3-spring2018-project3-group10/output/err_cv_sift_svm.RData")
sift_cv <- err_cv[,1]
err_cv_svm <- rbind(hog_cv,lbp_cv,sift_cv)
err_cv_svm
class(err_cv_svm)
err_cv_svm <- as.data.frame(err_cv_svm)
rownames(err_cv_svm) <- c("HOG","LBP","SIFT")
colnames(err_cv_svm) <- c("gamma = 0.01","0.03","0.05","0.07","0.09")
err_cv_svm
colnames(err_cv_svm) <- c("gamma = 0.01","gamma = 0.03","gamma = 0.05","gamma = 0.07","gamma = 0.09")
err_cv_svm
load("~/GitHub/Spring2018-Project3-spring2018-project3-group10/output/err_cv_HOG_svm.RData")
hog_cv <- err_cv[,1]
load("~/GitHub/Spring2018-Project3-spring2018-project3-group10/output/err_cv_LBP_svm.RData")
lbp_cv <- err_cv[,1]
load("~/GitHub/Spring2018-Project3-spring2018-project3-group10/output/err_cv_sift_svm.RData")
sift_cv <- err_cv[,1]
err_cv_svm <- rbind(hog_cv,lbp_cv,sift_cv)
err_cv_svm <- as.data.frame(err_cv_svm)
rownames(err_cv_svm) <- c("HOG","LBP","SIFT")
colnames(err_cv_svm) <- c("gamma = 0.01","gamma = 0.03","gamma = 0.05","gamma = 0.07","gamma = 0.09")
print(err_cv_svm)
setwd("~/GitHub/Spring2018-Project3-spring2018-project3-group10/doc")
getwd()
# read train dataset
dat_train <- read.csv('../data/SIFT_train.csv', header = F)
label_train <- read.csv('../data/label_train.csv')
dat_train <- dat_train[, -1]
label_train <- label_train[,3]
#
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
# which model to perform cross validation
run.cv = T
cv.xgboost = T
K = 5
xgboost_values <- seq(0.1, 0.5, by = 0.1) # eta for xgboost
xgboost_labels = paste("XGBoost with eta =", xgboost_values)
#
if(run.cv){
if(cv.xgboost){
err_cv <- array(dim=c(length(xgboost_values), 2))
for(k in 1:length(xgboost_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
}
}
save(err_cv, file="../output/err_cv_sift_xg.RData")
}
load("~/GitHub/Spring2018-Project3-spring2018-project3-group10/output/err_cv_hog_xg.RData")
err_cv
err_cv
View(err_cv_svm)
cv.error
array(dim=c(length(xgboost_values), 2))
label_train
#
k=1
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv[k,]
err_cv
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv
err_cv[k,]
k
xgboost_values[k]
err_cv
k=1
xgboost_values
setwd("~/GitHub/Spring2018-Project3-spring2018-project3-group10/doc")
getwd()
# read train dataset
dat_train <- read.csv('../data/SIFT_train.csv', header = F)
label_train <- read.csv('../data/label_train.csv')
dat_train <- dat_train[, -1]
label_train <- label_train[,3]
#
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
# which model to perform cross validation
run.cv = T
cv.xgboost = T
K = 5
xgboost_values <- seq(0.1, 0.5, by = 0.1) # eta for xgboost
xgboost_labels = paste("XGBoost with eta =", xgboost_values)
k=1
err_cv <- array(dim=c(length(xgboost_values), 2))
err_cv
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv
k=2
err_cv[k,]
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv
#
k=3
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv
k=4
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv
#
k=5
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, xgboost_values[k], K, cv.xgboost = T)
err_cv
save(err_cv, file="../output/err_cv_sift_xg.RData")
err_cv
source("../lib/cv_result.R")
cv.result <- cv_result()
cv.result[[1]]
cv.result[[5]]
# min(cv.result[[5]])
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
packages.used=c("gbm", "MASS", "OpenImageR", "jpeg", "ggplot2", "reshape2", "randomForest",
"e1071", "xgboost")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
## Loading packages
library("EBImage")
library("gbm")
library("MASS")
library("OpenImageR")
library("jpeg")
library("ggplot2")
library("reshape2")
library("randomForest")
library("e1071")
library("xgboost")
experiment_dir <- "../data/train/" # This will be modified for different data sets.
# img_train_dir <- paste(experiment_dir, "train/", sep="")
# img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=T # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature=FALSE # process features
run.test=TRUE # run evaluation on an independent test set
run.test.feature = F # process features for test set
run.sift = F
run.hog = F
run.lbp = F
run.gbm = F
run.svm = F
run.xgboost = F
run.rf = F
run.logistic = F
model_values <- seq(3, 11, 2) # depth for GBM
# model_labels = paste("GBM with depth =", model_values)
svm_values <- seq(0.01, 0.1, by = 0.02) # gamma for svm
# svm_labels = paste("SVM with gamma =", svm_values)
xgboost_values <- seq(0.1, 0.5, by = 0.1) # eta for xgboost
# xgboost_labels = paste("XGBoost with eta =", xgboost_values)
# set up feature name
if(run.sift){
feature_name <- "sift"
}
if(run.hog){
feature_name <- "hog"
}
if(run.lbp){
feature_name <- "lbp"
}
# run feature extraction
source("../lib/feature.R")
features <- NULL
if(run.feature){
features <- feature(experiment_dir,
run.sift = run.sift, run.hog = run.hog, run.lbp = run.lbp,
export = T)
}else{
if("sift" %in% feature_name){
load("../output/feature_SIFT.RData")
features <- sift
}
if("hog" %in% feature_name){
load("../output/feature_HOG.RData")
features <- hog
}
if ("lbp" %in% feature_name){
features <- read.csv('../output/feature_LBP.csv',header = F)
}
}
cv.result[[1]]
cv.result[[4]]
cv.result[[2]]
source("../lib/model_compare.R")
run.compare <- F
compare.model(run.compare)
compare.model(run.compare)
sift.result
source("../lib/model_compare.R")
run.compare <- F
compare.model(run.compare)
source("../lib/model_compare.R")
run.compare <- F
compare.model(run.compare)
dat_test <- read.csv("../output/sift_test.csv", header = T)
dat_test <- dat_test[,-1]
dat_train <- read.csv("../output/sift_train.csv", header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv("../output/sift_train.csv", header = T)
label_train <- label_train[,2]
dim(dat_train)
length(label_train)
# fit model
tm_train <- rep(NA, 5)
tm_train[1] <- system.time(model.sift.gbm <- train(as.data.frame(dat_train), label_train,
params = 7, run.gbm = T))
tm_train[2] <- system.time(model.sift.svm <- train(as.data.frame(dat_train), label_train,
params = 0.01, run.svm = T))
tm_train[3] <- system.time(model.sift.log <- train(as.data.frame(dat_train), label_train,
run.log = T))
tm_train[4] <- system.time(model.sift.rf <- train(as.data.frame(dat_train), label_train,
params = c(14, 1500), run.rf = T))
tm_train[5] <- system.time(model.sift.xgboost <- train(as.data.frame(dat_train), label_train-1,
params = 0.1, run.xgboost = T))
tm_test <- rep(NA, 5)
error <- rep(NA, 5)
tm_test[1] <- system.time(pred_gbm <- test(model.sift.gbm, dat_test[,-1], test.gbm = T))
error[1] <- mean(pred_gbm != dat_test[,1])
tm_test[2] <- system.time(pred_svm <- test(model.sift.svm, dat_test[,-1], test.svm  = T))
error[2] <- mean(pred_svm != dat_test[,1])
tm_test[3] <- system.time(pred_log <- test(model.sift.log, dat_test[,-1], test.log = T))
error[3] <- mean(pred_gbm != dat_test[,1])
tm_test[4] <- system.time(pred_rf <- test(model.sift.rf, dat_test[,-1], test.rf = T))
error[4] <- mean(pred_log != dat_test[,1])
tm_test[5] <- system.time(pred_xgboost <- test(model.sift.xgboost, as.matrix(dat_test[,-1]), test.xgboost = T))
error[5] <- mean(pred_xgboost != dat_test[,1])
sift.result <- as.data.frame(rbind(tm_train, rbind(tm_test, error)))
colnames(sift.result) <- c("gbm", "svm", "logistic", "rf", "xgboost")
write.csv(sift.result, "compare_sift.csv")
sift.result
source("../lib/train.R")
source("../lib/test.R")
tm_train <- rep(NA, 5)
tm_train[1] <- system.time(model.sift.gbm <- train(as.data.frame(dat_train), label_train,
params = 7, run.gbm = T))
tm_train[2] <- system.time(model.sift.svm <- train(as.data.frame(dat_train), label_train,
params = 0.01, run.svm = T))
tm_train[3] <- system.time(model.sift.log <- train(as.data.frame(dat_train), label_train,
run.log = T))
tm_train[4] <- system.time(model.sift.rf <- train(as.data.frame(dat_train), label_train,
params = c(14, 1500), run.rf = T))
tm_train[5] <- system.time(model.sift.xgboost <- train(as.data.frame(dat_train), label_train-1,
params = 0.1, run.xgboost = T))
tm_test <- rep(NA, 5)
error <- rep(NA, 5)
tm_test[1] <- system.time(pred_gbm <- test(model.sift.gbm, dat_test[,-1], test.gbm = T))
error[1] <- mean(pred_gbm != dat_test[,1])
tm_test[2] <- system.time(pred_svm <- test(model.sift.svm, dat_test[,-1], test.svm  = T))
error[2] <- mean(pred_svm != dat_test[,1])
tm_test[3] <- system.time(pred_log <- test(model.sift.log, dat_test[,-1], test.log = T))
error[3] <- mean(pred_gbm != dat_test[,1])
tm_test[4] <- system.time(pred_rf <- test(model.sift.rf, dat_test[,-1], test.rf = T))
error[4] <- mean(pred_log != dat_test[,1])
tm_test[5] <- system.time(pred_xgboost <- test(model.sift.xgboost, as.matrix(dat_test[,-1]), test.xgboost = T))
error[5] <- mean(pred_xgboost != dat_test[,1])
sift.result <- as.data.frame(rbind(tm_train, rbind(tm_test, error)))
colnames(sift.result) <- c("gbm", "svm", "logistic", "rf", "xgboost")
write.csv(sift.result, "compare_sift.csv")
sift.result
source("../lib/model_compare.R")
run.compare <- F
compare.model(run.compare)
compare_hog <- read.csv("../output/compare_hog.csv", header = T)
print(compare_hog)
compare_lbp <- read.csv("../output/compare_lbp.csv", header = T)
print(compare_lbp)
compare_sift <- read.csv("../output/compare_sift.csv", header = T)
print(compare_sift)
write.csv(sift.result, "compare_sift.csv")
sift.result
getwd()
write.csv(sift.result, "../output/compare_sift.csv")
compare_sift <- read.csv("../output/compare_sift.csv", header = T)
print(compare_sift)
source("../lib/model_compare.R")
run.compare <- F
compare.model(run.compare)
source("../lib/model_compare.R")
run.compare <- F
compare.model(run.compare)
source("../lib/cv_result.R")
cv.result <- cv_result()
cv.result[[1]]
cv.result[[2]]
cv.result[[3]]
cv.result[[4]]
cv.result[[5]]
# min(cv.result[[5]])
source("../lib/model_compare.R")
run.compare <- F
compare.model(run.compare)
