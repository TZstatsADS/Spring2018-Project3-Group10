if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
# experiment_dir <- "../data/train/" # This will be modified for different data sets.
# img_train_dir <- paste(experiment_dir, "train/", sep="")
# img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
run.sift = F
run.lbp = F
run.hog = T
model_values <- seq(3, 11, 2) # depth for GBM
model_labels = paste("GBM with depth =", model_values)
svm_values <- seq(1, 100, by = 20) # gamma for svm
svm_labels = paste("SVM with gamma =", svm_values)
# source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
#                                                        "train",
#                                                        data_name="zip",
#                                                        export=TRUE))
# }
#
# tm_feature_test <- NA
# if(run.feature.test){
#   tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
#                                                      "test",
#                                                      data_name="zip",
#                                                      export=TRUE))
# }
#
# #save(dat_train, file="./output/feature_train.RData")
# #save(dat_test, file="./output/feature_test.RData")
if(run.sift){
feature_name <- "sift"
}
if(run.hog){
feature_name <- "hog"
}
if(run.lbp){
feature_name <- "lbp"
}
# constructing the feature path name
test_path <- paste0("../output/", feature_name, "_test.csv")
train_path <- paste0("../output/", feature_name, "_train.csv")
# read test dataset
dat_test <- read.csv(test_path, header = T)
dat_test <- dat_test[,-1]
# read train dataset
dat_train <- read.csv(train_path, header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv(train_path, header = T)
label_train <- label_train[,2]
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
# which model to perform cross validation
cv.gbm = F
cv.svm = T
if(run.cv){
if(cv.gbm){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, model_values[k], K, cv.gbm = T)
}
}
if(cv.svm){
err_cv <- array(dim=c(length(svm_values), 2))
for(k in 1:length(svm_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, svm_values[k], K, cv.svm = T)
}
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
if(cv.gbm){
load("../output/err_cv.RData")
#pdf("../figs/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0.25, 0.4))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values,
err_cv[,1]-err_cv[,2],
model_values,
err_cv[,1]+err_cv[,2],
length=0.1,
angle=90,
code=3)
#dev.off()
}
}
if(run.cv){
model_best=model_values[1]
# Best parameter for GBM
if(run.gbm){
model_best <- model_values[which.min(err_cv[,1])]
}
}
err_cv
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
# experiment_dir <- "../data/train/" # This will be modified for different data sets.
# img_train_dir <- paste(experiment_dir, "train/", sep="")
# img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
run.sift = F
run.lbp = F
run.hog = T
model_values <- seq(3, 11, 2) # depth for GBM
model_labels = paste("GBM with depth =", model_values)
svm_values <- seq(1, 10, by = 2) # gamma for svm
svm_labels = paste("SVM with gamma =", svm_values)
# source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
#                                                        "train",
#                                                        data_name="zip",
#                                                        export=TRUE))
# }
#
# tm_feature_test <- NA
# if(run.feature.test){
#   tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
#                                                      "test",
#                                                      data_name="zip",
#                                                      export=TRUE))
# }
#
# #save(dat_train, file="./output/feature_train.RData")
# #save(dat_test, file="./output/feature_test.RData")
if(run.sift){
feature_name <- "sift"
}
if(run.hog){
feature_name <- "hog"
}
if(run.lbp){
feature_name <- "lbp"
}
# constructing the feature path name
test_path <- paste0("../output/", feature_name, "_test.csv")
train_path <- paste0("../output/", feature_name, "_train.csv")
# read test dataset
dat_test <- read.csv(test_path, header = T)
dat_test <- dat_test[,-1]
# read train dataset
dat_train <- read.csv(train_path, header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv(train_path, header = T)
label_train <- label_train[,2]
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
# which model to perform cross validation
cv.gbm = F
cv.svm = T
if(run.cv){
if(cv.gbm){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, model_values[k], K, cv.gbm = T)
}
}
if(cv.svm){
err_cv <- array(dim=c(length(svm_values), 2))
for(k in 1:length(svm_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, svm_values[k], K, cv.svm = T)
}
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
if(cv.gbm){
load("../output/err_cv.RData")
#pdf("../figs/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0.25, 0.4))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values,
err_cv[,1]-err_cv[,2],
model_values,
err_cv[,1]+err_cv[,2],
length=0.1,
angle=90,
code=3)
#dev.off()
}
}
if(run.cv){
model_best=model_values[1]
# Best parameter for GBM
if(run.gbm){
model_best <- model_values[which.min(err_cv[,1])]
}
}
err_cv
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
# experiment_dir <- "../data/train/" # This will be modified for different data sets.
# img_train_dir <- paste(experiment_dir, "train/", sep="")
# img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
run.sift = F
run.lbp = F
run.hog = T
model_values <- seq(3, 11, 2) # depth for GBM
model_labels = paste("GBM with depth =", model_values)
svm_values <- seq(0.01, 0.1, by = 0.02) # gamma for svm
svm_labels = paste("SVM with gamma =", svm_values)
# source("../lib/feature.R")
#
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
#                                                        "train",
#                                                        data_name="zip",
#                                                        export=TRUE))
# }
#
# tm_feature_test <- NA
# if(run.feature.test){
#   tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
#                                                      "test",
#                                                      data_name="zip",
#                                                      export=TRUE))
# }
#
# #save(dat_train, file="./output/feature_train.RData")
# #save(dat_test, file="./output/feature_test.RData")
if(run.sift){
feature_name <- "sift"
}
if(run.hog){
feature_name <- "hog"
}
if(run.lbp){
feature_name <- "lbp"
}
# constructing the feature path name
test_path <- paste0("../output/", feature_name, "_test.csv")
train_path <- paste0("../output/", feature_name, "_train.csv")
# read test dataset
dat_test <- read.csv(test_path, header = T)
dat_test <- dat_test[,-1]
# read train dataset
dat_train <- read.csv(train_path, header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv(train_path, header = T)
label_train <- label_train[,2]
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
# which model to perform cross validation
cv.gbm = F
cv.svm = T
if(run.cv){
if(cv.gbm){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, model_values[k], K, cv.gbm = T)
}
}
if(cv.svm){
err_cv <- array(dim=c(length(svm_values), 2))
for(k in 1:length(svm_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(as.data.frame(dat_train), label_train, svm_values[k], K, cv.svm = T)
}
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
if(cv.gbm){
load("../output/err_cv.RData")
#pdf("../figs/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0.25, 0.4))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values,
err_cv[,1]-err_cv[,2],
model_values,
err_cv[,1]+err_cv[,2],
length=0.1,
angle=90,
code=3)
#dev.off()
}
}
if(run.cv){
model_best=model_values[1]
# Best parameter for GBM
if(run.gbm){
model_best <- model_values[which.min(err_cv[,1])]
}
}
err_cv
# read test dataset
dat_test <- read.csv("../output/hog_test.csv", header = T)
dat_test <- dat_test[,-1]
# read train dataset
dat_train <- read.csv("../output/hog_train.csv", header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv("../output/hog_train.csv", header = T)
label_train <- label_train[,2]
tm_train[1] <- system.time(model.hog.gbm <- train(as.data.frame(dat_train), label_train,
params = 7, run.gbm = T))
source("../lib/train.R")
source("../lib/test.R")
# read test dataset
dat_test <- read.csv("../output/hog_test.csv", header = T)
dat_test <- dat_test[,-1]
# read train dataset
dat_train <- read.csv("../output/hog_train.csv", header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv("../output/hog_train.csv", header = T)
label_train <- label_train[,2]
# fit model
tm_train <- rep(NA, 5)
tm_train[1] <- system.time(model.hog.gbm <- train(as.data.frame(dat_train), label_train,
params = 7, run.gbm = T))
tm_train[1]
tm_train[2] <- system.time(model.hog.svm <- train(as.data.frame(dat_train), label_train,
params = 7, run.svm = T))
tm_train[3] <- system.time(model.hog.log <- train(as.data.frame(dat_train), label_train,
params = 7, run.log = T))
tm_train[4] <- system.time(model.hog.rf <- train(as.data.frame(dat_train), label_train,
params = 7, run.rf = T))
tm_train[5] <- system.time(model.hog.xgboost <- train(as.data.frame(dat_train), label_train,
params = 7, run.xgboost = T))
tm_train[1] <- system.time(model.hog.gbm <- train(as.data.frame(dat_train), label_train,
params = 7, run.gbm = T))
tm_train[2] <- system.time(model.hog.svm <- train(as.data.frame(dat_train), label_train,
params = 0.03, run.svm = T))
dim(dat_train)
dim(label_train)
label_train <- read.csv("../output/hog_train.csv", header = T)
label_train <- label_train[,2]
length(label_train)
tm_train[1] <- system.time(model.hog.gbm <- train(as.data.frame(dat_train), label_train,
params = 7, run.gbm = T))
tm_train[2] <- system.time(model.hog.svm <- train(as.data.frame(dat_train), label_train,
params = 0.03, run.svm = T))
tm_train[3] <- system.time(model.hog.log <- train(as.data.frame(dat_train), label_train,
run.log = T))
source("../lib/train.R")
source("../lib/test.R")
tm_train[3] <- system.time(model.hog.log <- train(as.data.frame(dat_train), label_train,
run.log = T))
min(cv.result[[4]])
source("../lib/cv_result.R")
cv.result <- cv_result()
cv.result[[4]]
min(cv.result[[4]])
cv.result[[4]]
tm_train[4] <- system.time(model.hog.rf <- train(as.data.frame(dat_train), label_train,
params = c(6, 2000), run.rf = T))
source("../lib/train.R")
source("../lib/test.R")
tm_train[4] <- system.time(model.hog.rf <- train(as.data.frame(dat_train), label_train,
params = c(6, 2000), run.rf = T))
tm_train[5] <- system.time(model.hog.xgboost <- train(as.data.frame(dat_train), label_train,
params = 0.2, run.xgboost = T))
source("../lib/train.R")
source("../lib/test.R")
tm_train[5] <- system.time(model.hog.xgboost <- train(as.data.frame(dat_train), label_train,
params = 0.2, run.xgboost = T))
tm_train[5] <- system.time(model.hog.xgboost <- train(as.data.frame(dat_train), label_train-1,
params = 0.2, run.xgboost = T))
tm_test[1] <- system.time(pred_gbm <- test(model.sift.gbm, dat_test[,-1], test.gbm = T))
tm_test[1] <- system.time(pred_gbm <- test(model.hog.gbm, dat_test[,-1], test.gbm = T))
tm.test <- rep(NA, 5)
tm_test[1] <- system.time(pred_gbm <- test(model.hog.gbm, dat_test[,-1], test.gbm = T))
tm_test <- rep(NA, 5)
tm_test[1] <- system.time(pred_gbm <- test(model.hog.gbm, dat_test[,-1], test.gbm = T))
mean(pred_gbm != dat_test[,1])
mean(pred_gbm != dat_test[,1])
tm_test[2] <- system.time(pred_svm <- test(model.hog.svm, dat_test[,-1], test.gbm = T))
mean(pred_gbm != dat_test[,1])
tm_test[2] <- system.time(pred_svm <- test(model.hog.svm, dat_test[,-1], test.gbm = T))
tm_test[2] <- system.time(pred_svm <- test(model.hog.svm, dat_test[,-1], test.svm  = T))
mean(pred_svm != dat_test[,1])
tm_test[3] <- system.time(pred_log <- test(model.hog.log, dat_test[,-1], test.log = T))
mean(pred_gbm != dat_test[,1])
tm_test[4] <- system.time(pred_rf <- test(model.hog.rf, dat_test[,-1], test.rf = T))
mean(pred_log != dat_test[,1])
tm_test[5] <- system.time(pred_xgboost <- test(model.hog.xgboost, dat_test[,-1], test.xgboost = T))
mean(pred_xgboost != dat_test[,1])
tm_test[5] <- system.time(pred_xgboost <- test(as.matrix(model.hog.xgboost), dat_test[,-1], test.xgboost = T))
tm_test[5] <- system.time(pred_xgboost <- test(model.hog.xgboost, as.matrix(dat_test[,-1]), test.xgboost = T))
mean(pred_xgboost != dat_test[,1])
error[1] <- mean(pred_gbm != dat_test[,1])
error <- rep(NA, 5)
error[1] <- mean(pred_gbm != dat_test[,1])
error[2] <- mean(pred_svm != dat_test[,1])
error[3] <- mean(pred_gbm != dat_test[,1])
error[4] <- mean(pred_log != dat_test[,1])
error[5] <- mean(pred_xgboost != dat_test[,1])
hog.result <- rbind(tm_train, rbind(tm_test, error))
hog.result
hog.result <- as.data.frame(rbind(tm_train, rbind(tm_test, error)))
hog.result
colnames(hog.result)
colnames(hog.result) <- c("gbm", "svm", "logistic", "rf", "xgboost")
hog.result
setwd("~/Documents/GitHub/Spring2018-Project3-Group10/output")
write.csv(hog.result, "compare_hog.csv")
######  feature lbp
# read test dataset
dat_test <- read.csv("../output/lbp_test.csv", header = T)
dat_test <- dat_test[,-1]
# read train dataset
dat_train <- read.csv("../output/lbp_train.csv", header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv("../output/lbp_train.csv", header = T)
label_train <- label_train[,2]
dim(dat_train)
length(label_train)
min(cv.result[[5]])
cv.result[[5]]
######  feature lbp
# read test dataset
dat_test <- read.csv("../output/lbp_test.csv", header = T)
dat_test <- dat_test[,-1]
# read train dataset
dat_train <- read.csv("../output/lbp_train.csv", header = T)
dat_train <- dat_train[, 3:length(dat_train[1,])]
label_train <- read.csv("../output/lbp_train.csv", header = T)
label_train <- label_train[,2]
dim(dat_train)
length(label_train)
# fit model
tm_train <- rep(NA, 5)
tm_train[1] <- system.time(model.lbp.gbm <- train(as.data.frame(dat_train), label_train,
params = 7, run.gbm = T))
tm_train[2] <- system.time(model.lbp.svm <- train(as.data.frame(dat_train), label_train,
params = 0.03, run.svm = T))
tm_train[3] <- system.time(model.lbp.log <- train(as.data.frame(dat_train), label_train,
run.log = T))
tm_train[4] <- system.time(model.lbp.rf <- train(as.data.frame(dat_train), label_train,
params = c(14, 1500), run.rf = T))
tm_train[5] <- system.time(model.lbp.xgboost <- train(as.data.frame(dat_train), label_train-1,
params = 0.1, run.xgboost = T))
tm_test <- rep(NA, 5)
error <- rep(NA, 5)
tm_test[1] <- system.time(pred_gbm <- test(model.lbp.gbm, dat_test[,-1], test.gbm = T))
error[1] <- mean(pred_gbm != dat_test[,1])
tm_test[2] <- system.time(pred_svm <- test(model.lbp.svm, dat_test[,-1], test.svm  = T))
error[2] <- mean(pred_svm != dat_test[,1])
tm_test[3] <- system.time(pred_log <- test(model.lbp.log, dat_test[,-1], test.log = T))
error[3] <- mean(pred_gbm != dat_test[,1])
tm_test[4] <- system.time(pred_rf <- test(model.lbp.rf, dat_test[,-1], test.rf = T))
error[4] <- mean(pred_log != dat_test[,1])
tm_test[5] <- system.time(pred_xgboost <- test(model.lbp.xgboost, as.matrix(dat_test[,-1]), test.xgboost = T))
error[5] <- mean(pred_xgboost != dat_test[,1])
hog.result <- as.data.frame(rbind(tm_train, rbind(tm_test, error)))
colnames(hog.result) <- c("gbm", "svm", "logistic", "rf", "xgboost")
hog.result
lbp.result <- as.data.frame(rbind(tm_train, rbind(tm_test, error)))
colnames(lbp.result) <- c("gbm", "svm", "logistic", "rf", "xgboost")
lbp.result
write.csv(lbp.result, "compare_lbp.csv")
compare_hog <- read.csv("../output/compare_hog.csv", header = T)
print(compare_hog)
compare_hog <- read.csv("../output/compare_hog.csv", header = T)
print(compare_hog)
compare_lbp <- read.csv("../output/compare_lbp.csv", header = T)
print(compare_lbp)
source("../lib/model_compare.R")
compare.model()
